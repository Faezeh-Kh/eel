Platform ATMega328p {
	measures {				
		"variables".milliToUnitFactor = 0.001,	
		"variables".voltsPerUnit = 0.0049,
			
		"Board".clockPeriod = 0.000000062,
		"Board".Voltage = 5.0,		
		"Board".current = 0.018020,
		"Board".currentIdle = 0.0033852, 
		"Board".cpuPower = "Board.\'http://fr.tblf.energy.estimation/eel/\'::Type::Current" * "Board.\'http://fr.tblf.energy.estimation/eel/\'::Type::Voltage",
		"Board".cpuPowerIdle ="Board.currentIdle" * "Board.\'http://fr.tblf.energy.estimation/eel/\'::Type::Voltage",  
						
		"LED".Voltage = 5.0,
		"LED".current = 0.00845,		 		
		"LED".numberOfLedsRunning = ocl:"LED.allInstances() -> select(it | it.oclContainer().oclAsType(Pin).level = 1) -> size()",						
		"LED".currentOfLedsRunning = "LED.\'http://fr.tblf.energy.estimation/eel/\'::Type::Current" * "LED.numberOfLedsRunning",
		"LED".powerOfLedsRunning = "LED.currentOfLedsRunning" * "LED.numberOfLedsRunning" * "LED.\'http://fr.tblf.energy.estimation/eel/\'::Type::Voltage",
		
		"InfraRedSensor".Voltage = 5.0,
		"InfraRedSensor".current = 0.0044,			
		"InfraRedSensor".internalLedCurrent = 0.00085,
		"InfraRedSensor".numberOfSensorsRunning = ocl: "InfraRedSensor.allInstances() -> size()",
		"InfraRedSensor".numberOnObstacle = ocl:"InfraRedSensor.allInstances() -> select(it | it.oclContainer.oclAsType(Pin).level = 0) -> asSequence() -> size()",
		"InfraRedSensor".powerOfInfraRedSensorsOnIdle = "InfraRedSensor.numberOfSensorsRunning" * "InfraRedSensor.\'http://fr.tblf.energy.estimation/eel/\'::Type::Voltage" * "InfraRedSensor.\'http://fr.tblf.energy.estimation/eel/\'::Type::Current", 
		"InfraRedSensor".powerOfInfraRedSensorsOnObstacle = "InfraRedSensor.numberOnObstacle" * "InfraRedSensor.internalLedCurrent" * "InfraRedSensor.\'http://fr.tblf.energy.estimation/eel/\'::Type::Voltage", 
		"InfraRedSensor".powerOfInfraRedSensors = "InfraRedSensor.powerOfInfraRedSensorsOnIdle" + "InfraRedSensor.powerOfInfraRedSensorsOnObstacle",
		
		"MicroServo".current = 0.0025704,		
		"MicroServo".numberOfServoRunning = ocl: "MicroServo.allInstances() -> size()",
		"MicroServo".currentOfServoRunning = "MicroServo.numberOfServoRunning" * "MicroServo.\'http://fr.tblf.energy.estimation/eel/\'::Type::Current",
		"MicroServo".Power = "MicroServo.currentOfServoRunning" * "Board.\'http://fr.tblf.energy.estimation/eel/\'::Type::Voltage", 
		"MicroServo".energyPerDegreeHigh = 0.0020415, 
		"MicroServo".energyPerDegreeLow = 0.000901, 		
		"MicroServo".degreesHigh = ocl:"let rotation = (self.operand.oclAsType(IntegerConstant).value - self.module.oclContainer().oclAsType(Pin).level).abs() in if (rotation <= 39) then rotation else 39.0 endif",
		"MicroServo".degreesLow = ocl:"let rotation = (self.operand.oclAsType(IntegerConstant).value - self.module.oclContainer().oclAsType(Pin).level).abs() in if (rotation > 39) then (rotation - 39) else 0.0 endif",
		"MicroServo".energyHigh = "MicroServo.energyPerDegreeHigh" * "MicroServo.degreesHigh",
		"MicroServo".energyLow = "MicroServo.energyPerDegreeLow" * "MicroServo.degreesLow",
		"MicroServo".Energy = "MicroServo.energyHigh" + "MicroServo.energyLow",
		
		// value * voltsPerUnit = internalVoltage, * conductance = Intensity, * board voltage = power consumption for all sensors 		
		"AmbientLightSensor".current = ocl:"AmbientLightSensor.allInstances() -> iterate( it: AmbientLightSensor; acc: Real = 0.0 | acc + it.oclContainer.oclAsType(Pin).level * 0.0049 * 0.004545455)",		
		"AmbientLightSensor".Power = "Board.\'http://fr.tblf.energy.estimation/eel/\'::Type::Voltage" * "AmbientLightSensor.\'http://fr.tblf.energy.estimation/eel/\'::Type::Current",
		
		"Delay".delayDurationMs = ocl:"self.value", // milliseconds
		"Delay".delayDuration = "Delay.delayDurationMs" * "variables.milliToUnitFactor",	
		"Delay".clockCyles = 76.0,
		"Delay".callDuration = "Delay.clockCyles" * "Board.clockPeriod",
		"Delay".Duration = "Delay.callDuration" + "Delay.delayDuration",
		
		"WaitFor".clockCycles = 10.0, 
		"WaitFor".callDuration = "WaitFor.clockCycles" * "Board.clockPeriod",
		"WaitFor".RealDuration, //milliseconds
		"WaitFor".realDurationAsSeconds = "WaitFor.\'http://fr.tblf.energy.estimation/eel/\'::Type::Duration" * "variables.milliToUnitFactor",
		"WaitFor".totalDuration = "WaitFor.realDurationAsSeconds" + "WaitFor.callDuration",
		
		"ModuleAssignment".clockCycles = 44.0, //digitalWrite
		"ModuleAssignment".callDuration = "ModuleAssignment.clockCycles" * "Board.clockPeriod",					
		"ModuleAssignment".controlsServo = ocl:"if (self.module.oclIsKindOf(MicroServo)) then 1.0 else 0.0 endif",
		"ModuleAssignment".energyImpact = "ModuleAssignment.controlsServo" * "MicroServo.\'http://fr.tblf.energy.estimation/eel/\'::Type::Energy",		
		"ModuleAssignment".energyFromCall = "ModuleAssignment.callDuration" * "Board.systemPower",
		
		"BooleanModuleGet".clockCycles = 51.0, //digitalRead
		"BooleanModuleGet".callDuration = "BooleanModuleGet.clockCycles" * "Board.clockPeriod",
		
		"IntegerModuleGet".clockCycles = 51.0, //digitalRead
		"IntegerModuleGet".callDuration = "IntegerModuleGet.clockCycles" * "Board.clockPeriod",	
				
		"BinaryIntegerExpression".clockCycles = 6.0, //7  if false
		"BinaryIntegerExpression".callDuration = "BinaryIntegerExpression.clockCycles" * "Board.clockPeriod",
		
		"VariableDeclaration".clockCycles = 1.0,
		"VariableDeclaration".callDuration = "VariableDeclaration.clockCycles" * "Board.clockPeriod",
		
		"VariableAssignement".clockCycles = 2.0,
		"VariableAssignement".callDuration = "VariableAssignement.clockCycles" * "Board.clockPeriod",
			
		"Board".devicesPower = "LED.powerOfLedsRunning" + "InfraRedSensor.powerOfInfraRedSensors",
		"Board".systemPower = "Board.cpuPower" + "Board.devicesPower",				
		"Board".systemPowerOnIdle = "Board.cpuPowerIdle" + "Board.devicesPower",	
		
		"WaitFor"#execute.Energy = "Board.systemPowerOnIdle" * "WaitFor.totalDuration",
		"Delay"#execute.Energy = "Delay.\'http://fr.tblf.energy.estimation/eel/\'::Type::Duration" * "Board.systemPower",			
		"ModuleAssignment"#execute.Energy = "ModuleAssignment.energyFromCall" + "ModuleAssignment.energyImpact",
		"IntegerModuleGet"#evaluate.Energy = "IntegerModuleGet.callDuration" * "Board.systemPower",
		"VariableAssignment"#execute.Energy = "VariableAssignement.callDuration" * "Board.systemPower",
		"VariableDeclaration"#execute.Energy = "VariableDeclaration.callDuration" * "Board.systemPower",		
		"BinaryIntegerExpression"#evaluate.Energy = "BinaryIntegerExpression.callDuration" * "Board.systemPower",
		"BooleanModuleGet"#evaluate.Energy = "BooleanModuleGet.callDuration" * "Board.systemPower"				 		 	
	}
}
