Platform ATMega328p {
	measures {				
		"variables".milliToUnitFactor = 0.001,	
			
		"Board".clockPeriod = 0.000000062,
		"Board".Voltage = 5.0,		
		"Board".Current = 0.0164,
		"Board".currentIdle = 0.0075, 
		"Board".cpuPower = "Board.\'http://fr.tblf.energy.estimation/eel/\'::Type::Current" * "Board.\'http://fr.tblf.energy.estimation/eel/\'::Type::Voltage",
		"Board".cpuPowerIdle ="Board.currentIdle" * "Board.\'http://fr.tblf.energy.estimation/eel/\'::Type::Voltage",  
				
		"LED".Voltage = 5.0,
		"LED".Current = 0.0039,		 		
		"LED".numberOfLedsRunning = ocl:"LED.allInstances() -> select(it | it.oclContainer().oclAsType(Pin).level = 1) -> size()",						
		"LED".currentOfLedsRunning = "LED.\'http://fr.tblf.energy.estimation/eel/\'::Type::Current" * "LED.numberOfLedsRunning",
		"LED".powerOfLedsRunning = "LED.currentOfLedsRunning" * "LED.numberOfLedsRunning" * "LED.\'http://fr.tblf.energy.estimation/eel/\'::Type::Voltage",
		
		"InfraRedSensor".Voltage = 3.3,
		"InfraRedSensor".Current = 0.00235,			
		"InfraRedSensor".internalLedCurrent = 0.00085,
		"InfraRedSensor".numberOfSensorsRunning = ocl: "InfraRedSensor.allInstances() -> size()",
		"InfraRedSensor".numberOnObstacle = ocl:"InfraRedSensor.allInstances() -> select(it | it.oclContainer.oclAsType(Pin).level = 0) -> asSequence() -> size()",
		"InfraRedSensor".powerOfInfraRedSensorsOnIdle = "InfraRedSensor.numberOfSensorsRunning" * "InfraRedSensor.\'http://fr.tblf.energy.estimation/eel/\'::Type::Voltage" * "InfraRedSensor.\'http://fr.tblf.energy.estimation/eel/\'::Type::Current", 
		"InfraRedSensor".powerOfInfraRedSensorsOnObstacle = "InfraRedSensor.numberOnObstacle" * "InfraRedSensor.internalLedCurrent" * "InfraRedSensor.\'http://fr.tblf.energy.estimation/eel/\'::Type::Voltage", 
		"InfraRedSensor".powerOfInfraRedSensors = "InfraRedSensor.powerOfInfraRedSensorsOnIdle" + "InfraRedSensor.powerOfInfraRedSensorsOnObstacle",
				 
		"Delay".delayDurationMs = ocl:"self.value", // milliseconds
		"Delay".delayDuration = "Delay.delayDurationMs" * "variables.milliToUnitFactor",	
		"Delay".clockCyles = 76.0,
		"Delay".callDuration = "Delay.clockCyles" * "Board.clockPeriod",
		"Delay".Duration = "Delay.callDuration" + "Delay.delayDuration",
		
		"WaitFor".clockCycles = 10.0, 
		"WaitFor".callDuration = "WaitFor.clockCycles" * "Board.clockPeriod",
		"WaitFor".RealDuration, //milliseconds
		"WaitFor".realDurationAsSeconds = "WaitFor.\'http://fr.tblf.energy.estimation/eel/\'::Type::Duration" * "variables.milliToUnitFactor",
		"WaitFor".totalDuration = "WaitFor.realDurationAsSeconds" + "WaitFor.callDuration",
		
		"ModuleAssignment".clockCycles = 44.0,
		"ModuleAssignment".callDuration = "ModuleAssignment.clockCycles" * "Board.clockPeriod",					
				
		"BooleanModuleGet".clockCycles = 51.0, 
		"BooleanModuleGet".callDuration = "BooleanModuleGet.clockCycles" * "Board.clockPeriod",
		
		"IntegerModuleGet".clockCycles = 51.0,
		"IntegerModuleGet".callDuration = "IntegerModuleGet.clockCycles" * "Board.clockPeriod",
						
		"Board".systemPower = "Board.cpuPower" + "LED.powerOfLedsRunning" + "InfraRedSensor.powerOfInfraRedSensors",		
		"Board".systemPowerOnIdle = "Board.cpuPowerIdle" + "LED.powerOfLedsRunning" + "InfraRedSensor.powerOfInfraRedSensors",	
		
		"WaitFor"#execute.Energy = "Board.systemPowerOnIdle" * "WaitFor.totalDuration",
		"Delay"#execute.Energy = "Delay.\'http://fr.tblf.energy.estimation/eel/\'::Type::Duration" * "Board.systemPower",			
		"ModuleAssignment"#execute.Energy = "ModuleAssignment.callDuration" * "Board.systemPower",
		"IntegerModuleGet"#execute.Energy = "IntegerModuleGet.callDuration" * "Board.systemPower",
		"BooleanModuleGet"#execute.Energy = "BooleanModuleGet.callDuration" * "Board.systemPower" 				 		 		
	}
}
