/*
 * generated by Xtext 2.12.0
 */
grammar InternalPetrinet;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.naomod.tblf.petrinet.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.naomod.tblf.petrinet.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.naomod.tblf.petrinet.services.PetrinetGrammarAccess;

}

@parser::members {

 	private PetrinetGrammarAccess grammarAccess;

    public InternalPetrinetParser(TokenStream input, PetrinetGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Net";
   	}

   	@Override
   	protected PetrinetGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleNet
entryRuleNet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNetRule()); }
	iv_ruleNet=ruleNet
	{ $current=$iv_ruleNet.current; }
	EOF;

// Rule Net
ruleNet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNetAccess().getNetAction_0(),
					$current);
			}
		)
		otherlv_1='Net'
		{
			newLeafNode(otherlv_1, grammarAccess.getNetAccess().getNetKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getNetAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='name'
			{
				newLeafNode(otherlv_3, grammarAccess.getNetAccess().getNameKeyword_3_0());
			}
			(
				(
					lv_name_4_0=RULE_ID
					{
						newLeafNode(lv_name_4_0, grammarAccess.getNetAccess().getNameIDTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNetRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_4_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)?
		(
			otherlv_5='places'
			{
				newLeafNode(otherlv_5, grammarAccess.getNetAccess().getPlacesKeyword_4_0());
			}
			otherlv_6='{'
			{
				newLeafNode(otherlv_6, grammarAccess.getNetAccess().getLeftCurlyBracketKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNetAccess().getPlacesPlaceParserRuleCall_4_2_0());
					}
					lv_places_7_0=rulePlace
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNetRule());
						}
						add(
							$current,
							"places",
							lv_places_7_0,
							"org.naomod.tblf.petrinet.Petrinet.Place");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_8=','
				{
					newLeafNode(otherlv_8, grammarAccess.getNetAccess().getCommaKeyword_4_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getNetAccess().getPlacesPlaceParserRuleCall_4_3_1_0());
						}
						lv_places_9_0=rulePlace
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getNetRule());
							}
							add(
								$current,
								"places",
								lv_places_9_0,
								"org.naomod.tblf.petrinet.Petrinet.Place");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_10='}'
			{
				newLeafNode(otherlv_10, grammarAccess.getNetAccess().getRightCurlyBracketKeyword_4_4());
			}
		)?
		(
			otherlv_11='transitions'
			{
				newLeafNode(otherlv_11, grammarAccess.getNetAccess().getTransitionsKeyword_5_0());
			}
			otherlv_12='{'
			{
				newLeafNode(otherlv_12, grammarAccess.getNetAccess().getLeftCurlyBracketKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNetAccess().getTransitionsTransitionParserRuleCall_5_2_0());
					}
					lv_transitions_13_0=ruleTransition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNetRule());
						}
						add(
							$current,
							"transitions",
							lv_transitions_13_0,
							"org.naomod.tblf.petrinet.Petrinet.Transition");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_14=','
				{
					newLeafNode(otherlv_14, grammarAccess.getNetAccess().getCommaKeyword_5_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getNetAccess().getTransitionsTransitionParserRuleCall_5_3_1_0());
						}
						lv_transitions_15_0=ruleTransition
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getNetRule());
							}
							add(
								$current,
								"transitions",
								lv_transitions_15_0,
								"org.naomod.tblf.petrinet.Petrinet.Transition");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_16='}'
			{
				newLeafNode(otherlv_16, grammarAccess.getNetAccess().getRightCurlyBracketKeyword_5_4());
			}
		)?
		otherlv_17='first'
		{
			newLeafNode(otherlv_17, grammarAccess.getNetAccess().getFirstKeyword_6());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNetRule());
					}
				}
				otherlv_18=RULE_ID
				{
					newLeafNode(otherlv_18, grammarAccess.getNetAccess().getFirstPlaceCrossReference_7_0());
				}
			)
		)
		otherlv_19='}'
		{
			newLeafNode(otherlv_19, grammarAccess.getNetAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRulePlace
entryRulePlace returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlaceRule()); }
	iv_rulePlace=rulePlace
	{ $current=$iv_rulePlace.current; }
	EOF;

// Rule Place
rulePlace returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPlaceAccess().getPlaceAction_0(),
					$current);
			}
		)
		otherlv_1='Place'
		{
			newLeafNode(otherlv_1, grammarAccess.getPlaceAccess().getPlaceKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getPlaceAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='name'
			{
				newLeafNode(otherlv_3, grammarAccess.getPlaceAccess().getNameKeyword_3_0());
			}
			(
				(
					lv_name_4_0=RULE_ID
					{
						newLeafNode(lv_name_4_0, grammarAccess.getPlaceAccess().getNameIDTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPlaceRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_4_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)?
		(
			otherlv_5='tokens'
			{
				newLeafNode(otherlv_5, grammarAccess.getPlaceAccess().getTokensKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPlaceAccess().getTokensEIntParserRuleCall_4_1_0());
					}
					lv_tokens_6_0=ruleEInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPlaceRule());
						}
						set(
							$current,
							"tokens",
							lv_tokens_6_0,
							"org.naomod.tblf.petrinet.Petrinet.EInt");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_7='to'
			{
				newLeafNode(otherlv_7, grammarAccess.getPlaceAccess().getToKeyword_5_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPlaceRule());
						}
					}
					otherlv_8=RULE_ID
					{
						newLeafNode(otherlv_8, grammarAccess.getPlaceAccess().getToTransitionCrossReference_5_1_0());
					}
				)
			)
		)?
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getPlaceAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleTransition
entryRuleTransition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTransitionRule()); }
	iv_ruleTransition=ruleTransition
	{ $current=$iv_ruleTransition.current; }
	EOF;

// Rule Transition
ruleTransition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTransitionAccess().getTransitionAction_0(),
					$current);
			}
		)
		otherlv_1='Transition'
		{
			newLeafNode(otherlv_1, grammarAccess.getTransitionAccess().getTransitionKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getTransitionAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='name'
			{
				newLeafNode(otherlv_3, grammarAccess.getTransitionAccess().getNameKeyword_3_0());
			}
			(
				(
					lv_name_4_0=RULE_ID
					{
						newLeafNode(lv_name_4_0, grammarAccess.getTransitionAccess().getNameIDTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTransitionRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_4_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)?
		(
			otherlv_5='output'
			{
				newLeafNode(otherlv_5, grammarAccess.getTransitionAccess().getOutputKeyword_4_0());
			}
			otherlv_6='('
			{
				newLeafNode(otherlv_6, grammarAccess.getTransitionAccess().getLeftParenthesisKeyword_4_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTransitionRule());
						}
					}
					otherlv_7=RULE_ID
					{
						newLeafNode(otherlv_7, grammarAccess.getTransitionAccess().getOutputPlaceCrossReference_4_2_0());
					}
				)
			)
			(
				otherlv_8=','
				{
					newLeafNode(otherlv_8, grammarAccess.getTransitionAccess().getCommaKeyword_4_3_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTransitionRule());
							}
						}
						otherlv_9=RULE_ID
						{
							newLeafNode(otherlv_9, grammarAccess.getTransitionAccess().getOutputPlaceCrossReference_4_3_1_0());
						}
					)
				)
			)*
			otherlv_10=')'
			{
				newLeafNode(otherlv_10, grammarAccess.getTransitionAccess().getRightParenthesisKeyword_4_4());
			}
		)?
		(
			otherlv_11='input'
			{
				newLeafNode(otherlv_11, grammarAccess.getTransitionAccess().getInputKeyword_5_0());
			}
			otherlv_12='('
			{
				newLeafNode(otherlv_12, grammarAccess.getTransitionAccess().getLeftParenthesisKeyword_5_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTransitionRule());
						}
					}
					otherlv_13=RULE_ID
					{
						newLeafNode(otherlv_13, grammarAccess.getTransitionAccess().getInputPlaceCrossReference_5_2_0());
					}
				)
			)
			(
				otherlv_14=','
				{
					newLeafNode(otherlv_14, grammarAccess.getTransitionAccess().getCommaKeyword_5_3_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTransitionRule());
							}
						}
						otherlv_15=RULE_ID
						{
							newLeafNode(otherlv_15, grammarAccess.getTransitionAccess().getInputPlaceCrossReference_5_3_1_0());
						}
					)
				)
			)*
			otherlv_16=')'
			{
				newLeafNode(otherlv_16, grammarAccess.getTransitionAccess().getRightParenthesisKeyword_5_4());
			}
		)?
		otherlv_17='}'
		{
			newLeafNode(otherlv_17, grammarAccess.getTransitionAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
