/*
 * generated by Xtext 2.12.0
 */
package org.naomod.tblf.petrinet.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.naomod.tblf.petrinet.Net;
import org.naomod.tblf.petrinet.PetrinetPackage;
import org.naomod.tblf.petrinet.Place;
import org.naomod.tblf.petrinet.Transition;
import org.naomod.tblf.petrinet.services.PetrinetGrammarAccess;

@SuppressWarnings("all")
public class PetrinetSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PetrinetGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PetrinetPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PetrinetPackage.NET:
				sequence_Net(context, (Net) semanticObject); 
				return; 
			case PetrinetPackage.PLACE:
				sequence_Place(context, (Place) semanticObject); 
				return; 
			case PetrinetPackage.TRANSITION:
				sequence_Transition(context, (Transition) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Net returns Net
	 *
	 * Constraint:
	 *     (name=ID? (places+=Place places+=Place*)? (transitions+=Transition transitions+=Transition*)? first=[Place|ID])
	 */
	protected void sequence_Net(ISerializationContext context, Net semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Place returns Place
	 *
	 * Constraint:
	 *     (name=ID? tokens=EInt? to=[Transition|ID]?)
	 */
	protected void sequence_Place(ISerializationContext context, Place semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Transition returns Transition
	 *
	 * Constraint:
	 *     (name=ID? (output+=[Place|ID] output+=[Place|ID]*)? (input+=[Place|ID] input+=[Place|ID]*)?)
	 */
	protected void sequence_Transition(ISerializationContext context, Transition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
