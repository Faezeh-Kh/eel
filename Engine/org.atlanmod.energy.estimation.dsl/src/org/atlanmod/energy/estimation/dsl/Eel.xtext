// automatically generated by Xtext
grammar org.atlanmod.energy.estimation.dsl.Eel with org.eclipse.xtext.common.Terminals

import 'platform:/resource/org.atlanmod.energy.estimation.metamodel/model/eel.ecore'
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


Platform returns Platform:
	{Platform}
	'Platform'
	name=EString
	'{'
		('variables' '{' variables+=Variable ( "," variables+=Variable)* '}' )?
		('measures' '{' measures+=Measure ( "," measures+=Measure)* '}' )?
	'}';

Measure returns Measure:
	MeasureValue_Impl  | MeasureOCL | MeasureAttribute | MeasureCast | MeasureUnboundProductOperation | MeasureUnboundSumOperation | MeasureUnboundDivisionOperation | MeasureUnboundSubstractOperation | RealTimeDuration | CompositeMeasure /*| MeasureUnboundSumOperation | MeasureUnboundProductOperation */ ;

CompositeMeasure returns CompositeMeasure:
	ExponentialMeasure | LogisticMeasure | IntegrationMeasure
;

MeasurementUncertaintyInformation returns MeasurementUncertaintyInformation:
	NormalDistribution | Interval | Sampling | Integral;

EString returns ecore::EString: 
	STRING | ID;

Variable returns Variable:
	'Variable'
	name=EString
	'{'
		('value' value=EBigDecimal)?
		'vibility' vibility=Visibility
	'}';

EBigDecimal returns ecore::EBigDecimal:
	INT? '.' INT;

enum Type returns Type:
	Current="current" |
	Duration="duration"  |
	Energy="energy"  |
	Frequency="frequency"  |
	Power="power"  |
	Voltage="voltage"  |
	Scalar="scalar"   
;

enum Visibility returns Visibility:
	LOCAL = 'LOCAL' | GLOBAL = 'GLOBAL';

MeasureValue_Impl returns MeasureValue:
	{MeasureValue}	
	(post ?= 'post')? targetClass=EString ('#' targetOperation=EString)? ('.') (type=Type | subname = EString) "=" (value=EBigDecimal)? 	
;

MeasureOCL returns MeasureOCL:
	{MeasureOCL}
	(post ?= 'post')? targetClass=EString ('#' targetOperation=EString)? ('.') (type=Type | subname = EString) "=" 'ocl:' oclQuery=EString  	
;

MeasureAttribute returns MeasureAttribute:
	{MeasureAttribute}
	(post ?= 'post')? targetClass=EString ('#' targetOperation=EString)? ('.') (type=Type | subname = EString) "=" "attribute:" att=EString  		
;

MeasureCast returns MeasureCast:
	{MeasureCast}
	(post ?= 'post')? targetClass=EString ('#' targetOperation=EString)? ('.') subname=EString "=" measure=[Measure|EString] "as" type=Type 	
;

RealTimeDuration returns RealTimeDuration:
	{RealTimeDuration}
	(post ?= 'post')? targetClass=EString ('#' targetOperation=EString)? ('.absoluteTime') 
;

MeasureUnboundSumOperation returns MeasureUnboundSumOperation:
	{MeasureUnboundSumOperation}
	(post ?= 'post')? targetClass=EString ('#' targetOperation=EString)? ('.') (type=Type | subname = EString) "="  measures+=[Measure|EString] ('+' measures+=[Measure|EString])+ 		
;

MeasureUnboundSubstractOperation returns MeasureUnboundSubstractOperation:
	{MeasureUnboundSubstractOperation}
	(post ?= 'post')? targetClass=EString ('#' targetOperation=EString)? ('.') (type=Type | subname = EString) "="  measures+=[Measure|EString] ('-' measures+=[Measure|EString])+ 		
;

MeasureUnboundProductOperation returns MeasureUnboundProductOperation:
	{MeasureUnboundProductOperation}
	(post ?= 'post')? targetClass=EString ('#' targetOperation=EString)? ('.') (type=Type | subname = EString) "="  measures+=[Measure|EString] ('*' measures+=[Measure|EString])+ 		
;

MeasureUnboundDivisionOperation returns MeasureUnboundDivisionOperation:
	{MeasureUnboundDivisionOperation}
	(post ?= 'post')? targetClass=EString ('#' targetOperation=EString)? ('.') (type=Type | subname = EString) "="  measures+=[Measure|EString] ('/' measures+=[Measure|EString])+ 		
;

ExponentialMeasure returns ExponentialMeasure:
	{ExponentialMeasure}
	(post ?= 'post')? targetClass=EString ('#' targetOperation=EString)? ('.') (type=Type | subname = EString) "=" "exp" x=[Measure|EString]
;	

LogisticMeasure returns LogisticMeasure:
	{LogisticMeasure} 
	(post ?= 'post')? targetClass=EString ('#' targetOperation=EString)? ('.') (type=Type | subname = EString) "=" "logistic" L=[Measure|EString] k=[Measure|EString] x0=[Measure|EString] x=[Measure|EString]	
;

IntegrationMeasure returns IntegrationMeasure:
	{IntegrationMeasure}
	(post ?= 'post')? targetClass=EString ('#' targetOperation=EString)? ('.') (type=Type | subname = EString) "=" "integral" function=[CompositeMeasure|EString] '['leftBound=[Measure|EString] ';' rightBound=[Measure|EString]']'
;


MeasurementUncertainty returns MeasurementUncertainty:
	{MeasurementUncertainty}
	'MeasurementUncertainty'
	'{'
		('standardUncertainty' standardUncertainty=EBigDecimal)?
		('information' information=MeasurementUncertaintyInformation)?
	'}';

NormalDistribution returns NormalDistribution:
	{NormalDistribution}
	'NormalDistribution'
	;

Interval returns Interval:
	'Interval'
	'{'
		'lowerEndpoint' lowerEndpoint=Measure
		'upperEndpoint' upperEndpoint=Measure
	'}';

Sampling returns Sampling:
	{Sampling}
	'Sampling'
	'{'
		('measurementProcedure' measurementProcedure=EString)?
		('samples' '{' samples+=Sample ( "," samples+=Sample)* '}' )?
	'}';

Integral returns Integral:
	'Integral'
	'{'
		('function' function=EString)?
		'interval' interval=[Interval|EString]
	'}';

Sample returns Sample:
	{Sample}
	'Sample'
	'{'
		('quantity' '{' quantity+=Measure ( "," quantity+=Measure)* '}' )?
	'}';	

EStructuralFeature returns ecore::EStructuralFeature:
	EAttribute | EReference;

EClassifier returns ecore::EClassifier:
	EClass | EDataType_Impl | EEnum;

EClass returns ecore::EClass:
	{ecore::EClass}
	(abstract?='abstract')?
	(interface?='interface')?
	'EClass'
	name=EString
	'{'
		('instanceClassName' instanceClassName=EString)?
		('instanceTypeName' instanceTypeName=EString)?
		('eSuperTypes' '(' eSuperTypes+=[ecore::EClass|EString] ( "," eSuperTypes+=[ecore::EClass|EString])* ')' )?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
		('eOperations' '{' eOperations+=EOperation ( "," eOperations+=EOperation)* '}' )?
		('eStructuralFeatures' '{' eStructuralFeatures+=EStructuralFeature ( "," eStructuralFeatures+=EStructuralFeature)* '}' )?
		('eGenericSuperTypes' '{' eGenericSuperTypes+=EGenericType ( "," eGenericSuperTypes+=EGenericType)* '}' )?
	'}';

EOperation returns ecore::EOperation:
	{ecore::EOperation}
	'EOperation'
	name=EString
	'{'
		('ordered' ordered=EBoolean)?
		('unique' unique=EBoolean)?
		('lowerBound' lowerBound=EInt)?
		('upperBound' upperBound=EInt)?
		('eType' eType=[ecore::EClassifier|EString])?
		('eExceptions' '(' eExceptions+=[ecore::EClassifier|EString] ( "," eExceptions+=[ecore::EClassifier|EString])* ')' )?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eGenericType' eGenericType=EGenericType)?
		('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
		('eParameters' '{' eParameters+=EParameter ( "," eParameters+=EParameter)* '}' )?
		('eGenericExceptions' '{' eGenericExceptions+=EGenericType ( "," eGenericExceptions+=EGenericType)* '}' )?
	'}';

EAnnotation returns ecore::EAnnotation:
	{ecore::EAnnotation}
	'EAnnotation'
	'{'
		('source' source=EString)?
		('references' '(' references+=[ecore::EObject|EString] ( "," references+=[ecore::EObject|EString])* ')' )?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('details' '{' details+=EStringToStringMapEntry ( "," details+=EStringToStringMapEntry)* '}' )?
		('contents' '{' contents+=EObject ( "," contents+=EObject)* '}' )?
	'}';

ETypeParameter returns ecore::ETypeParameter:
	{ecore::ETypeParameter}
	'ETypeParameter'
	name=EString
	'{'
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eBounds' '{' eBounds+=EGenericType ( "," eBounds+=EGenericType)* '}' )?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

EGenericType returns ecore::EGenericType:
	{ecore::EGenericType}
	'EGenericType'
	'{'
		('eTypeParameter' eTypeParameter=[ecore::ETypeParameter|EString])?
		('eClassifier' eClassifier=[ecore::EClassifier|EString])?
		('eUpperBound' eUpperBound=EGenericType)?
		('eTypeArguments' '{' eTypeArguments+=EGenericType ( "," eTypeArguments+=EGenericType)* '}' )?
		('eLowerBound' eLowerBound=EGenericType)?
	'}';

EStringToStringMapEntry returns ecore::EStringToStringMapEntry:
	{ecore::EStringToStringMapEntry}
	'EStringToStringMapEntry'
	'{'
		('key' key=EString)?
		('value' value=EString)?
	'}';

EObject returns ecore::EObject:
	{ecore::EObject}
	'EObject'
	;

EInt returns ecore::EInt:
	'-'? INT;

EAttribute returns ecore::EAttribute:
	{ecore::EAttribute}
	(volatile?='volatile')?
	(transient?='transient')?
	(unsettable?='unsettable')?
	(derived?='derived')?
	(iD?='iD')?
	'EAttribute'
	name=EString
	'{'
		('ordered' ordered=EBoolean)?
		('unique' unique=EBoolean)?
		('lowerBound' lowerBound=EInt)?
		('upperBound' upperBound=EInt)?
		('changeable' changeable=EBoolean)?
		('defaultValueLiteral' defaultValueLiteral=EString)?
		('eType' eType=[ecore::EClassifier|EString])?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eGenericType' eGenericType=EGenericType)?
	'}';

EReference returns ecore::EReference:
	{ecore::EReference}
	(volatile?='volatile')?
	(transient?='transient')?
	(unsettable?='unsettable')?
	(derived?='derived')?
	(containment?='containment')?
	'EReference'
	name=EString
	'{'
		('ordered' ordered=EBoolean)?
		('unique' unique=EBoolean)?
		('lowerBound' lowerBound=EInt)?
		('upperBound' upperBound=EInt)?
		('changeable' changeable=EBoolean)?
		('defaultValueLiteral' defaultValueLiteral=EString)?
		('resolveProxies' resolveProxies=EBoolean)?
		('eType' eType=[ecore::EClassifier|EString])?
		('eOpposite' eOpposite=[ecore::EReference|EString])?
		('eKeys' '(' eKeys+=[ecore::EAttribute|EString] ( "," eKeys+=[ecore::EAttribute|EString])* ')' )?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eGenericType' eGenericType=EGenericType)?
	'}';

EDataType_Impl returns ecore::EDataType:
	{ecore::EDataType}
	'EDataType'
	name=EString
	'{'
		('instanceClassName' instanceClassName=EString)?
		('instanceTypeName' instanceTypeName=EString)?
		('serializable' serializable=EBoolean)?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
	'}';

EEnum returns ecore::EEnum:
	{ecore::EEnum}
	'EEnum'
	name=EString
	'{'
		('instanceClassName' instanceClassName=EString)?
		('instanceTypeName' instanceTypeName=EString)?
		('serializable' serializable=EBoolean)?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
		('eLiterals' '{' eLiterals+=EEnumLiteral ( "," eLiterals+=EEnumLiteral)* '}' )?
	'}';

EEnumLiteral returns ecore::EEnumLiteral:
	{ecore::EEnumLiteral}
	'EEnumLiteral'
	name=EString
	'{'
		('value' value=EInt)?
		('literal' literal=EString)?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
	'}';

EParameter returns ecore::EParameter:
	{ecore::EParameter}
	'EParameter'
	name=EString
	'{'
		('ordered' ordered=EBoolean)?
		('unique' unique=EBoolean)?
		('lowerBound' lowerBound=EInt)?
		('upperBound' upperBound=EInt)?
		('eType' eType=[ecore::EClassifier|EString])?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eGenericType' eGenericType=EGenericType)?
	'}';


