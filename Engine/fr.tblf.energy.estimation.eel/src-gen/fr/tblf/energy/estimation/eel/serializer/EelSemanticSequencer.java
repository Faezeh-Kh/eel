/*
 * generated by Xtext 2.14.0
 */
package fr.tblf.energy.estimation.eel.serializer;

import com.google.inject.Inject;
import eel.EelPackage;
import eel.Estimation;
import eel.MetaClass;
import eel.Operation;
import eel.Platform;
import eel.Variable;
import fr.tblf.energy.estimation.eel.services.EelGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class EelSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private EelGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == EelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case EelPackage.ESTIMATION:
				sequence_Estimation(context, (Estimation) semanticObject); 
				return; 
			case EelPackage.META_CLASS:
				sequence_MetaClass(context, (MetaClass) semanticObject); 
				return; 
			case EelPackage.OPERATION:
				sequence_Operation(context, (Operation) semanticObject); 
				return; 
			case EelPackage.PLATFORM:
				sequence_Platform(context, (Platform) semanticObject); 
				return; 
			case EelPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Estimation returns Estimation
	 *
	 * Constraint:
	 *     (target=[Target|EString] (variables+=[Variable|EString] variables+=[Variable|EString]*)? formula=EString)
	 */
	protected void sequence_Estimation(ISerializationContext context, Estimation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Target returns MetaClass
	 *     MetaClass returns MetaClass
	 *
	 * Constraint:
	 *     (name=EString (operations+=Operation operations+=Operation?)?)
	 */
	protected void sequence_MetaClass(ISerializationContext context, MetaClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Target returns Operation
	 *     Operation returns Operation
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_Operation(ISerializationContext context, Operation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EelPackage.Literals.TARGET__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EelPackage.Literals.TARGET__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOperationAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Platform returns Platform
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (targets+=MetaClass targets+=MetaClass*)? 
	 *         (estimations+=Estimation estimations+=Estimation*)? 
	 *         (variables+=Variable variables+=Variable*)?
	 *     )
	 */
	protected void sequence_Platform(ISerializationContext context, Platform semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     (vibility=Visibility name=EString value=EDouble)
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EelPackage.Literals.VARIABLE__VIBILITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EelPackage.Literals.VARIABLE__VIBILITY));
			if (transientValues.isValueTransient(semanticObject, EelPackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EelPackage.Literals.VARIABLE__NAME));
			if (transientValues.isValueTransient(semanticObject, EelPackage.Literals.VARIABLE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EelPackage.Literals.VARIABLE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableAccess().getVibilityVisibilityEnumRuleCall_0_0(), semanticObject.getVibility());
		feeder.accept(grammarAccess.getVariableAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getVariableAccess().getValueEDoubleParserRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
