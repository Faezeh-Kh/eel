/**
 */
package fr.tblf.energy.estimation.eel.provider;

import fr.tblf.energy.estimation.eel.util.EelAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class EelItemProviderAdapterFactory extends EelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tblf.energy.estimation.eel.Platform} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlatformItemProvider platformItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tblf.energy.estimation.eel.Platform}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlatformAdapter() {
		if (platformItemProvider == null) {
			platformItemProvider = new PlatformItemProvider(this);
		}

		return platformItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tblf.energy.estimation.eel.Variable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableItemProvider variableItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tblf.energy.estimation.eel.Variable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableAdapter() {
		if (variableItemProvider == null) {
			variableItemProvider = new VariableItemProvider(this);
		}

		return variableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tblf.energy.estimation.eel.MeasureValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeasureValueItemProvider measureValueItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tblf.energy.estimation.eel.MeasureValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeasureValueAdapter() {
		if (measureValueItemProvider == null) {
			measureValueItemProvider = new MeasureValueItemProvider(this);
		}

		return measureValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tblf.energy.estimation.eel.MeasureOCL} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeasureOCLItemProvider measureOCLItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tblf.energy.estimation.eel.MeasureOCL}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeasureOCLAdapter() {
		if (measureOCLItemProvider == null) {
			measureOCLItemProvider = new MeasureOCLItemProvider(this);
		}

		return measureOCLItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tblf.energy.estimation.eel.MeasureAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeasureAttributeItemProvider measureAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tblf.energy.estimation.eel.MeasureAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeasureAttributeAdapter() {
		if (measureAttributeItemProvider == null) {
			measureAttributeItemProvider = new MeasureAttributeItemProvider(this);
		}

		return measureAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tblf.energy.estimation.eel.MeasureCast} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeasureCastItemProvider measureCastItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tblf.energy.estimation.eel.MeasureCast}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeasureCastAdapter() {
		if (measureCastItemProvider == null) {
			measureCastItemProvider = new MeasureCastItemProvider(this);
		}

		return measureCastItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tblf.energy.estimation.eel.MeasureBinaryProductOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeasureBinaryProductOperationItemProvider measureBinaryProductOperationItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tblf.energy.estimation.eel.MeasureBinaryProductOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeasureBinaryProductOperationAdapter() {
		if (measureBinaryProductOperationItemProvider == null) {
			measureBinaryProductOperationItemProvider = new MeasureBinaryProductOperationItemProvider(this);
		}

		return measureBinaryProductOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tblf.energy.estimation.eel.MeasureBinarySumOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeasureBinarySumOperationItemProvider measureBinarySumOperationItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tblf.energy.estimation.eel.MeasureBinarySumOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeasureBinarySumOperationAdapter() {
		if (measureBinarySumOperationItemProvider == null) {
			measureBinarySumOperationItemProvider = new MeasureBinarySumOperationItemProvider(this);
		}

		return measureBinarySumOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tblf.energy.estimation.eel.EnergyComputation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnergyComputationItemProvider energyComputationItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tblf.energy.estimation.eel.EnergyComputation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnergyComputationAdapter() {
		if (energyComputationItemProvider == null) {
			energyComputationItemProvider = new EnergyComputationItemProvider(this);
		}

		return energyComputationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tblf.energy.estimation.eel.PowerComputation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PowerComputationItemProvider powerComputationItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tblf.energy.estimation.eel.PowerComputation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPowerComputationAdapter() {
		if (powerComputationItemProvider == null) {
			powerComputationItemProvider = new PowerComputationItemProvider(this);
		}

		return powerComputationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tblf.energy.estimation.eel.RealTimeDuration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RealTimeDurationItemProvider realTimeDurationItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tblf.energy.estimation.eel.RealTimeDuration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRealTimeDurationAdapter() {
		if (realTimeDurationItemProvider == null) {
			realTimeDurationItemProvider = new RealTimeDurationItemProvider(this);
		}

		return realTimeDurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tblf.energy.estimation.eel.MeasureUnboundSumOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeasureUnboundSumOperationItemProvider measureUnboundSumOperationItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tblf.energy.estimation.eel.MeasureUnboundSumOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeasureUnboundSumOperationAdapter() {
		if (measureUnboundSumOperationItemProvider == null) {
			measureUnboundSumOperationItemProvider = new MeasureUnboundSumOperationItemProvider(this);
		}

		return measureUnboundSumOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tblf.energy.estimation.eel.MeasureUnboundProductOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeasureUnboundProductOperationItemProvider measureUnboundProductOperationItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tblf.energy.estimation.eel.MeasureUnboundProductOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeasureUnboundProductOperationAdapter() {
		if (measureUnboundProductOperationItemProvider == null) {
			measureUnboundProductOperationItemProvider = new MeasureUnboundProductOperationItemProvider(this);
		}

		return measureUnboundProductOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tblf.energy.estimation.eel.MeasurementUncertainty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeasurementUncertaintyItemProvider measurementUncertaintyItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tblf.energy.estimation.eel.MeasurementUncertainty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeasurementUncertaintyAdapter() {
		if (measurementUncertaintyItemProvider == null) {
			measurementUncertaintyItemProvider = new MeasurementUncertaintyItemProvider(this);
		}

		return measurementUncertaintyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tblf.energy.estimation.eel.NormalDistribution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NormalDistributionItemProvider normalDistributionItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tblf.energy.estimation.eel.NormalDistribution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNormalDistributionAdapter() {
		if (normalDistributionItemProvider == null) {
			normalDistributionItemProvider = new NormalDistributionItemProvider(this);
		}

		return normalDistributionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tblf.energy.estimation.eel.Interval} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntervalItemProvider intervalItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tblf.energy.estimation.eel.Interval}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntervalAdapter() {
		if (intervalItemProvider == null) {
			intervalItemProvider = new IntervalItemProvider(this);
		}

		return intervalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tblf.energy.estimation.eel.Sampling} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SamplingItemProvider samplingItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tblf.energy.estimation.eel.Sampling}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSamplingAdapter() {
		if (samplingItemProvider == null) {
			samplingItemProvider = new SamplingItemProvider(this);
		}

		return samplingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tblf.energy.estimation.eel.Integral} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegralItemProvider integralItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tblf.energy.estimation.eel.Integral}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegralAdapter() {
		if (integralItemProvider == null) {
			integralItemProvider = new IntegralItemProvider(this);
		}

		return integralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tblf.energy.estimation.eel.Sample} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SampleItemProvider sampleItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tblf.energy.estimation.eel.Sample}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSampleAdapter() {
		if (sampleItemProvider == null) {
			sampleItemProvider = new SampleItemProvider(this);
		}

		return sampleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tblf.energy.estimation.eel.CompositeMeasure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositeMeasureItemProvider compositeMeasureItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tblf.energy.estimation.eel.CompositeMeasure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositeMeasureAdapter() {
		if (compositeMeasureItemProvider == null) {
			compositeMeasureItemProvider = new CompositeMeasureItemProvider(this);
		}

		return compositeMeasureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tblf.energy.estimation.eel.LogisticMeasure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogisticMeasureItemProvider logisticMeasureItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tblf.energy.estimation.eel.LogisticMeasure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogisticMeasureAdapter() {
		if (logisticMeasureItemProvider == null) {
			logisticMeasureItemProvider = new LogisticMeasureItemProvider(this);
		}

		return logisticMeasureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tblf.energy.estimation.eel.ExponentialMeasure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExponentialMeasureItemProvider exponentialMeasureItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tblf.energy.estimation.eel.ExponentialMeasure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExponentialMeasureAdapter() {
		if (exponentialMeasureItemProvider == null) {
			exponentialMeasureItemProvider = new ExponentialMeasureItemProvider(this);
		}

		return exponentialMeasureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tblf.energy.estimation.eel.IntegrationMeasure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegrationMeasureItemProvider integrationMeasureItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tblf.energy.estimation.eel.IntegrationMeasure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegrationMeasureAdapter() {
		if (integrationMeasureItemProvider == null) {
			integrationMeasureItemProvider = new IntegrationMeasureItemProvider(this);
		}

		return integrationMeasureItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (platformItemProvider != null) platformItemProvider.dispose();
		if (variableItemProvider != null) variableItemProvider.dispose();
		if (measureValueItemProvider != null) measureValueItemProvider.dispose();
		if (measureOCLItemProvider != null) measureOCLItemProvider.dispose();
		if (measureAttributeItemProvider != null) measureAttributeItemProvider.dispose();
		if (measureCastItemProvider != null) measureCastItemProvider.dispose();
		if (measureBinaryProductOperationItemProvider != null) measureBinaryProductOperationItemProvider.dispose();
		if (measureBinarySumOperationItemProvider != null) measureBinarySumOperationItemProvider.dispose();
		if (energyComputationItemProvider != null) energyComputationItemProvider.dispose();
		if (powerComputationItemProvider != null) powerComputationItemProvider.dispose();
		if (realTimeDurationItemProvider != null) realTimeDurationItemProvider.dispose();
		if (measureUnboundSumOperationItemProvider != null) measureUnboundSumOperationItemProvider.dispose();
		if (measureUnboundProductOperationItemProvider != null) measureUnboundProductOperationItemProvider.dispose();
		if (measurementUncertaintyItemProvider != null) measurementUncertaintyItemProvider.dispose();
		if (normalDistributionItemProvider != null) normalDistributionItemProvider.dispose();
		if (intervalItemProvider != null) intervalItemProvider.dispose();
		if (samplingItemProvider != null) samplingItemProvider.dispose();
		if (integralItemProvider != null) integralItemProvider.dispose();
		if (sampleItemProvider != null) sampleItemProvider.dispose();
		if (compositeMeasureItemProvider != null) compositeMeasureItemProvider.dispose();
		if (logisticMeasureItemProvider != null) logisticMeasureItemProvider.dispose();
		if (exponentialMeasureItemProvider != null) exponentialMeasureItemProvider.dispose();
		if (integrationMeasureItemProvider != null) integrationMeasureItemProvider.dispose();
	}

}
